package com.jafa.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.jafa.dao.SampleDao;
import com.jafa.domain.SampleVO;

@Controller
public class SampleController {
	
	@Autowired
	SampleDao sampleDao; // SampleDao 빈을 자동으로 주입받음

	@RequestMapping("/sample01/list")
	public String list1() {
		// 반환 타입 String : view 이름
		// @RequestMapping :  
		// 		value = 요청 URL
		// 		method = 속성을 설정하지 않으면 GET 방식 전송
		return "sampleList";
		// /WEB-INF/views/sampleList.jsp
	}
	
	// model.addAttribute : 객체를 뷰에서 사용할 수 있도록 스프링 컨테이너 Model에 저장
	@RequestMapping("/sample01/list2")
	public String list2(Model model) { // 스프링이 구현 객체를 자동 주입
		model.addAttribute("list", sampleDao.list());  
		// addAttribute() 메소드 : 객체를 뷰에서 사용할 수 있도록 스프링 컨테이너에 저장 
			// @param1 : 뷰에서 사용할 모델 이름 ${list}
			// @param2 : 모델 객체에 저장할 데이터 
		return "sample01/sampleList2";
	}
	
	// model.addAttribute 메서드 체이닝
	@RequestMapping("/sample/list3")
	public String list3(Model model) {
		model.addAttribute("list", sampleDao.list())
		.addAttribute("userName", "홍길동")
		.addAttribute("address", "대구광역시");
		// Model.addAttribute() 의 반환값은 자기자신이므로 메서드 체이닝 방식으로 작성 가능함
		return "sample01/sampleList3";
	}
	
	// ModelMap
	// VS Model
	// * 차이점
	// - 인터페이스 vs 클래스
	// - ModelMap은 Model 인터페이스를 구현한 구현체 클래스
	// * 공통점
	// - 스프링 MVC에서 컨트롤러에서 view 로 데이터를 전달하는데 사용.
	// - addAttribute를 사용함
	@RequestMapping("/sample/list4")
	public String list4(ModelMap modelMap) {
		modelMap.addAttribute("list", sampleDao.list())
		.addAttribute("userName", "홍길동")
		.addAttribute("address", "대구광역시");
		return "sample01/sampleList4";
	}
	
	// ModelAndView
	// - 스프링 MVC에서 컨트롤러의 처리 결과와 함께 뷰 이름과 모델 데이터를 같이 전달하는 클래스
	// VS Model, ModelMap
	// - Model, ModelMap이 데이터를 저장하고 전달하는 위주 인 반면 ModelAndView는 뷰 이름과 모델 데이터 설정
	@RequestMapping("/sample/list5")
	public ModelAndView list5() {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("sample01/sampleList5");
		mav.addObject("list",sampleDao.list())
		.addObject("userName", "홍길동")
		.addObject("address", "대구광역시");
		return mav;
	}

	@RequestMapping({"/sample01/list6","/sample01/get","/sample01/modigy"})
	public void list6() {
		// /sample01/list6 -> WEB-INF/views/sample01/list6.jsp
		// /sample01/get -> WEB-INF/views/sample01/get.jsp
		// /sample01/modigy -> WEB-INF/views/sample01/modify.jsp
	}
}
