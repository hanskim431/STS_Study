package com.jafa.controller;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

/**
 *  A controller for studying to get a parameter
 *  request.getParameter,  @RequestParam,  @RequestParam 생략, @RequestParam(required = false)
 * 
 * @author HansKim
 *
 */

@Controller
@RequestMapping("/sample04")
public class SampleController04 {
	
	// HttpServletRequest, request.getParameter 사용
	// 요청 : /sample04/list1?id=kim
	// 뷰에서 데이터를 사용하려면 Request 객체 보관소에 저장해야함
	@GetMapping("/list1")
	public String list1(HttpServletRequest request) {
		String userId = request.getParameter("id"); // name 값이 id인 파라미터를 받아 userId에 대입
		System.out.println(userId);
		request.setAttribute("UID", userId); // userId를 뷰에서 변수 사용 ${UID}
		return "sample04/sampleList1";
	}
	
	// @RequestParam 사용
	// - HTTP 요청에서 파라미터 값을 추출하여 메소드의 매개변수에 자동으로 바인딩해주는 어노테이션
	// - @RequestParam("id") String id = request.getParameter("id"); 의 역할을 수행 함
	// 요청 : /sample04/list2?userId=kim
	// 뷰에서 데이터를 사용하려면 Model 객체 보관소에 저장해야 함
	@GetMapping("/list2")
	public String list2(@RequestParam("userId") String id, Model model) { 
		System.out.println(id);
		model.addAttribute("userId", id); // userId를 뷰에서 변수 사용 ${id}
		return "sample04/sampleList2";
	}
	
	// @RequestParam 생략
	// - 쿼리스트링( ex)?id=kim )의 key값과 @RequestParam이 붙은 파라미터 이름이 같은 경우 @RequestParam을 생략할 수 있다.
	// - [ @RequestParam("id") String id ] VS [ String id ]
	// * 공통점 : 수행하는 역할은 동일함
	// * 차이점 : 필수 여부 기본 값
	// - @RequestParam("id") String id -> required 속성의 기본 값 "true"
	// - String id -> required 속성의 기본 값 "false"
	// 요청 : /sample04/list3?id=kim
	@GetMapping("/list3")
	public String list3(String id, Model model) {
		System.out.println(id);
		model.addAttribute("userId", id); // userId를 뷰에서 변수 사용 ${id}
		return "sample04/sampleList3";
	}
	// @RequestParam 필수 여부 수정
	// @RequestParam 어노테이션 required 기본 값 : true
	// 요청 : /sample04/list4?id=kim 와 /sample04/list4
	@GetMapping("/list4")
	public String list4(@RequestParam(required = false) String name) {
		System.out.println(name);
		return "sample04/sampleList4";
	}
	
	// 기본타입(primitive type)은 null 값이 될 수 없으므로 IllegalStateException 예외 발생
	// 기본타입에 상응하는 래퍼객체 사용할 것을 권장 long -> Long, int -> Integer
	// 요청 : /sample04/list5
	@GetMapping("/list5")
	public String list5(long mno) { // 	public String list5(long mno) 시 요청값이 없으면 : IllegalStateException
		System.out.println(mno);
		return "sample04/sampleList5";
	}
	
	// 파라미터를 전달하지 않았을 경우 defalutValue 속성을 사용하여 기본값을 지정할 수 있음
	// 요청 : /sample04/list6
	@GetMapping("/list6")
	public String list6(@RequestParam(defaultValue = "10") long mno) { 
		System.out.println(mno);
		return "sample04/sampleList6";
	}

	@GetMapping("/sampleForm1")
	public String sampleForm1() {
		return "sample04/sampleForm1";
	}
	
	// 동일한 이름을 key값으로 여러개를 받을 경우 배열 또는 컬렉션(List)을 사용한다.
	// 요청 : /sample04/list7?names=kim&names=lee&names=park 또는 /sample04/sampleForm1
	@GetMapping("/list7")
	public String list7(String[] names) {
		System.out.println(Arrays.toString(names));
		return "sample04/sampleList7";
	}
	
	// 컬렉션으로 값을 받을경우 @RequestParam을 생략할 수 없다.
	// 요청 : /sample04/list8?address=seoul&address=daegu&address=busan
	@GetMapping("/list8")
	public String list8(@RequestParam("address") List<String> address) {
		System.out.println(address);
		return "sample04/sampleList8";
	}
	
	@GetMapping("/sampleForm2")
	public String sampleForm2() {
		return "sample04/sampleForm2";
	}
	
	// 컬렉션으로 값을 받을경우 @RequestParam을 생략할 수 없다.
	// 요청 파라미터의 key와 value가 Map의 Key, Value에 대응된다.
	@PostMapping("/list9")
	public String list9(@RequestParam Map<String, String> map) {
		System.out.println(map);
		return "sample04/sampleList9";
	}
}
